// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package models

import (
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type goods_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var GoodsBinding = goods_EntityInfo{
	Entity: objectbox.Entity{
		Id: 5,
	},
	Uid: 6473635341756201923,
}

// Goods_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Goods_ = struct {
	Id               *objectbox.PropertyUint64
	ExtId            *objectbox.PropertyString
	Name             *objectbox.PropertyString
	IsDeleted        *objectbox.PropertyBool
	CreatedAt        *objectbox.PropertyInt64
	UpdatedAt        *objectbox.PropertyInt64
	Unit             *objectbox.RelationToOne
	IsOiliness       *objectbox.PropertyBool
	IsOilinessDry    *objectbox.PropertyBool
	IsErucicAcid     *objectbox.PropertyBool
	IsGlucosinolates *objectbox.PropertyBool
	IsMycotoxins     *objectbox.PropertyBool
	IsProtein        *objectbox.PropertyBool
	IsProteinDry     *objectbox.PropertyBool
	IsAcid           *objectbox.PropertyBool
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &GoodsBinding.Entity,
		},
	},
	ExtId: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &GoodsBinding.Entity,
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsDeleted: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &GoodsBinding.Entity,
		},
	},
	CreatedAt: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &GoodsBinding.Entity,
		},
	},
	UpdatedAt: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &GoodsBinding.Entity,
		},
	},
	Unit: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     15,
			Entity: &GoodsBinding.Entity,
		},
		Target: &UnitBinding.Entity,
	},
	IsOiliness: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     16,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsOilinessDry: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     17,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsErucicAcid: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     18,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsGlucosinolates: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     19,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsMycotoxins: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     20,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsProtein: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     21,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsProteinDry: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     22,
			Entity: &GoodsBinding.Entity,
		},
	},
	IsAcid: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     23,
			Entity: &GoodsBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (goods_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (goods_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Goods", 5, 6473635341756201923)
	model.Property("Id", 6, 1, 4702249070507604823)
	model.PropertyFlags(1)
	model.Property("ExtId", 9, 2, 2167132595030109212)
	model.Property("Name", 9, 3, 6066463889445251640)
	model.Property("IsDeleted", 1, 8, 8842949774138085970)
	model.Property("CreatedAt", 10, 9, 2493345568052603896)
	model.Property("UpdatedAt", 10, 10, 5950682132336614601)
	model.Property("Unit", 11, 15, 4053967826014371844)
	model.PropertyFlags(520)
	model.PropertyRelation("Unit", 2, 5957139385693366257)
	model.Property("IsOiliness", 1, 16, 6958449070744003436)
	model.Property("IsOilinessDry", 1, 17, 8293128413918247490)
	model.Property("IsErucicAcid", 1, 18, 8397601130670111846)
	model.Property("IsGlucosinolates", 1, 19, 5721743692662733350)
	model.Property("IsMycotoxins", 1, 20, 6321014573852160707)
	model.Property("IsProtein", 1, 21, 4688638062562025764)
	model.Property("IsProteinDry", 1, 22, 5875536471782537028)
	model.Property("IsAcid", 1, 23, 8801162713009126334)
	model.EntityLastPropertyId(23, 8801162713009126334)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (goods_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Goods).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (goods_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Goods).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (goods_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	if rel := object.(*Goods).Unit; rel != nil {
		if rId, err := UnitBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForUnit(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (goods_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*Goods)
	var propCreatedAt int64
	{
		var err error
		propCreatedAt, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.CreatedAt)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Goods.CreatedAt: " + err.Error())
		}
	}

	var propUpdatedAt int64
	{
		var err error
		propUpdatedAt, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.UpdatedAt)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Goods.UpdatedAt: " + err.Error())
		}
	}

	var offsetExtId = fbutils.CreateStringOffset(fbb, obj.ExtId)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)

	var rIdUnit uint64
	if rel := obj.Unit; rel != nil {
		if rId, err := UnitBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdUnit = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(23)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetUOffsetTSlot(fbb, 1, offsetExtId)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetName)
	fbutils.SetBoolSlot(fbb, 7, obj.IsDeleted)
	if obj.Unit != nil {
		fbutils.SetUint64Slot(fbb, 14, rIdUnit)
	}
	fbutils.SetBoolSlot(fbb, 15, obj.IsOiliness)
	fbutils.SetBoolSlot(fbb, 16, obj.IsOilinessDry)
	fbutils.SetBoolSlot(fbb, 17, obj.IsErucicAcid)
	fbutils.SetBoolSlot(fbb, 18, obj.IsGlucosinolates)
	fbutils.SetBoolSlot(fbb, 19, obj.IsMycotoxins)
	fbutils.SetBoolSlot(fbb, 20, obj.IsProtein)
	fbutils.SetBoolSlot(fbb, 21, obj.IsProteinDry)
	fbutils.SetBoolSlot(fbb, 22, obj.IsAcid)
	fbutils.SetInt64Slot(fbb, 8, propCreatedAt)
	fbutils.SetInt64Slot(fbb, 9, propUpdatedAt)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (goods_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'Goods' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(4, 0)

	propCreatedAt, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 20))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Goods.CreatedAt: " + err.Error())
	}

	propUpdatedAt, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 22))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Goods.UpdatedAt: " + err.Error())
	}

	var relUnit *Unit
	if rId := fbutils.GetUint64PtrSlot(table, 32); rId != nil && *rId > 0 {
		if rObject, err := BoxForUnit(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relUnit = rObject
		}
	}

	return &Goods{
		Id:               propId,
		ExtId:            fbutils.GetStringSlot(table, 6),
		Name:             fbutils.GetStringSlot(table, 8),
		IsDeleted:        fbutils.GetBoolSlot(table, 18),
		Unit:             relUnit,
		IsOiliness:       fbutils.GetBoolSlot(table, 34),
		IsOilinessDry:    fbutils.GetBoolSlot(table, 36),
		IsErucicAcid:     fbutils.GetBoolSlot(table, 38),
		IsGlucosinolates: fbutils.GetBoolSlot(table, 40),
		IsMycotoxins:     fbutils.GetBoolSlot(table, 42),
		IsProtein:        fbutils.GetBoolSlot(table, 44),
		IsProteinDry:     fbutils.GetBoolSlot(table, 46),
		IsAcid:           fbutils.GetBoolSlot(table, 48),
		CreatedAt:        propCreatedAt,
		UpdatedAt:        propUpdatedAt,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (goods_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Goods, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (goods_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*Goods), nil)
	}
	return append(slice.([]*Goods), object.(*Goods))
}

// Box provides CRUD access to Goods objects
type GoodsBox struct {
	*objectbox.Box
}

// BoxForGoods opens a box of Goods objects
func BoxForGoods(ob *objectbox.ObjectBox) *GoodsBox {
	return &GoodsBox{
		Box: ob.InternalBox(5),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Goods.Id property on the passed object will be assigned the new ID as well.
func (box *GoodsBox) Put(object *Goods) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Goods.Id property on the passed object will be assigned the new ID as well.
func (box *GoodsBox) Insert(object *Goods) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *GoodsBox) Update(object *Goods) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *GoodsBox) PutAsync(object *Goods) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Goods.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Goods.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *GoodsBox) PutMany(objects []*Goods) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *GoodsBox) Get(id uint64) (*Goods, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Goods), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *GoodsBox) GetMany(ids ...uint64) ([]*Goods, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Goods), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *GoodsBox) GetManyExisting(ids ...uint64) ([]*Goods, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Goods), nil
}

// GetAll reads all stored objects
func (box *GoodsBox) GetAll() ([]*Goods, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Goods), nil
}

// Remove deletes a single object
func (box *GoodsBox) Remove(object *Goods) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *GoodsBox) RemoveMany(objects ...*Goods) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the Goods_ struct to create conditions.
// Keep the *GoodsQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *GoodsBox) Query(conditions ...objectbox.Condition) *GoodsQuery {
	return &GoodsQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Goods_ struct to create conditions.
// Keep the *GoodsQuery if you intend to execute the query multiple times.
func (box *GoodsBox) QueryOrError(conditions ...objectbox.Condition) (*GoodsQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &GoodsQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See GoodsAsyncBox for more information.
func (box *GoodsBox) Async() *GoodsAsyncBox {
	return &GoodsAsyncBox{AsyncBox: box.Box.Async()}
}

// GoodsAsyncBox provides asynchronous operations on Goods objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type GoodsAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForGoods creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use GoodsBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForGoods(ob *objectbox.ObjectBox, timeoutMs uint64) *GoodsAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 5, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 5: %s" + err.Error())
	}
	return &GoodsAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *GoodsAsyncBox) Put(object *Goods) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *GoodsAsyncBox) Insert(object *Goods) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *GoodsAsyncBox) Update(object *Goods) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *GoodsAsyncBox) Remove(object *Goods) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all Goods which Id is either 42 or 47:
//
//	box.Query(Goods_.Id.In(42, 47)).Find()
type GoodsQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *GoodsQuery) Find() ([]*Goods, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Goods), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *GoodsQuery) Offset(offset uint64) *GoodsQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *GoodsQuery) Limit(limit uint64) *GoodsQuery {
	query.Query.Limit(limit)
	return query
}
